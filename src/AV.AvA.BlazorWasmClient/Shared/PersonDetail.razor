@using AV.AvA.BlazorWasmClient.Extensions
@using AV.AvA.Model
@using System.Globalization
@using System.Text.Json
@using System.Text.Encodings.Web
@using System.Text.Unicode
@using System.Diagnostics
@using System.Collections.ObjectModel
@using AV.AvA.BlazorWasmClient.Services
@inject JsonSerializerOptions _jsonOpts
@inject IPersonVersionAccessor pva
@using NodaTime

@{
    var deDe = new CultureInfo("de-DE");
}

<PersonNameTitle Person="@PersonVersion.Person" />

<MudCard Outlined="true" Class="ma-8">
    <MudCardContent>
        <MudList>
            <MudListSubheader>
                <MudText Typo="Typo.h6">Kontaktdaten</MudText>
            </MudListSubheader>
            <EmailList Emails="@PersonVersion.Person.Emails" />
            <MobilnummerList Mobilnummern="@PersonVersion.Person.Mobilnummern" />
            <AdressList Adressen="@PersonVersion.Person.Adressen" />
            @if (PersonVersion.Person.Geburtsdatum.HasValue || !string.IsNullOrEmpty(PersonVersion.Person.Geburtsort))
            {
                <MudListItem Icon="@Icons.Material.Filled.Cake">
                    Geboren
                    @if (PersonVersion.Person.Geburtsdatum.HasValue)
                    {
                        @: am
                        @PersonVersion.Person.Geburtsdatum.Value.ToString(deDe.DateTimeFormat.ShortDatePattern, deDe)
                    }
                    @if (!string.IsNullOrEmpty(PersonVersion.Person.Geburtsort))
                    {
                        @: in
                        @PersonVersion.Person.Geburtsort
                    }
                </MudListItem>
            }
            <MessengerList Messengers="@PersonVersion.Person.Messenger" />
            @if (!string.IsNullOrWhiteSpace(PersonVersion.Person.Webseite))
            {
                var websiteUrl = PersonVersion.Person.Webseite;
                if (!websiteUrl.StartsWith("http"))
                {
                    websiteUrl = $"http://{websiteUrl}";
                }
                <MudListItem Icon="@Icons.Material.Filled.Web">
                    <a href="@websiteUrl" target="_blank" rel="noopener noreferrer">@PersonVersion.Person.Webseite</a>
                </MudListItem>
            }
        </MudList>
    </MudCardContent>
</MudCard>

<MudCard Outlined="true" Class="ma-8">
    <MudCardContent>
        <MudList>
            <MudListSubheader>
                <MudText Typo="Typo.h6">Akademischer Verein</MudText>
            </MudListSubheader>

            <MudListItem Icon="@Icons.Material.Filled.Person">
                AV-ID @PersonVersion.AvId
            </MudListItem>

            @if (!string.IsNullOrEmpty(PersonVersion.Person.Kolonie))
            {
                <MudListItem Icon="@Icons.Material.Filled.LocationOn">
                    Kolonie @PersonVersion.Person.Kolonie
                </MudListItem>
            }
            @if (PersonVersion.Person.Debitorennummer.HasValue)
            {
                <MudListItem Icon="@Icons.Material.Filled.Payment">
                    Debitorennummer @PersonVersion.Person.Debitorennummer
                </MudListItem>
            }

            @{
                var StatusOMAvEv = PersonVersion.Person.Status.Find((s) => (s.Typ == StatusEreignisTyp.EintrittOrdentlichesMitgliedAVeV || s.Typ == StatusEreignisTyp.Uebertritt));
                var StatusOMHG = PersonVersion.Person.Status.Find((s) => s.Typ == StatusEreignisTyp.EintrittOrdentlichesMitgliedHG);
                var StatusOMHGStimmR = PersonVersion.Person.Status.Find((s) => s.Typ == StatusEreignisTyp.StimmrechtHGErhalten);
            }

            @if (StatusOMAvEv != null)
            {
                <PersonStatusListItem Ereignis=@StatusOMAvEv Verein="Akademischer Verein Darmstadt e.V." Zustand="ordentliches Mitglied" />
            }
            @if (StatusOMHG != null)
            {
                if (StatusOMHGStimmR != null)
                {
                    <PersonStatusListItem Ereignis=@StatusOMHG Verein="Hausgesellschaft Akademischer Verein Darmstadt e.V." Zustand="ordentliches Mitglied mit Stimmrecht" />
                }
                else
                {
                    <PersonStatusListItem Ereignis=@StatusOMHG Verein="Hausgesellschaft Akademischer Verein Darmstadt e.V." Zustand="ordentliches Mitglied" />
                }
            }
            @if ((StatusOMAvEv == null) && (StatusOMHG == null))
            {
                var StatusSMAVeV = PersonVersion.Person.Status.Find((s) => s.Typ == StatusEreignisTyp.EintrittStudentischesMitgliedAVeV);
                var StatusSMHG = PersonVersion.Person.Status.Find((s) => s.Typ == StatusEreignisTyp.EintrittStudentischesMitgliedHG);
                @if (StatusSMAVeV != null)
                {
                    <PersonStatusListItem Ereignis=@StatusSMAVeV Verein="Akademischer Verein Darmstadt e.V." Zustand="studentisches Mitglied" />
                }
                @if (StatusSMHG != null)
                {
                    <PersonStatusListItem Ereignis=@StatusSMHG Verein="Hausgesellschaft Akademischer Verein Darmstadt e.V." Zustand="studentisches Mitglied" />
                }

                var StatusVoMi = PersonVersion.Person.Status.Find((s) => s.Typ == StatusEreignisTyp.VollmitgliedAufgenommen);
                var StatusJuMi = PersonVersion.Person.Status.Find((s) => s.Typ == StatusEreignisTyp.JungmitgliedEingesungen);
                var StatusVerk = PersonVersion.Person.Status.Find((s) => s.Typ == StatusEreignisTyp.VerkehrsgastAufgenommen);

                @if (StatusVoMi != null)
                {
                    <PersonStatusListItem Ereignis=@StatusVoMi Verein="Akademischer Verein an der TU Darmstadt" Zustand="Vollmitglied" />
                }
                else if (StatusJuMi != null)
                {
                    <PersonStatusListItem Ereignis=@StatusJuMi Verein="Akademischer Verein an der TU Darmstadt" Zustand="Jungmitglied" />
                }
                else if (StatusVerk != null)
                {
                    <PersonStatusListItem Ereignis=@StatusVerk Verein="Akademischer Verein an der TU Darmstadt" Zustand="Verkehrsgast" />
                }

            }
            <MudListItem Class="ml-n3 mt-n3">
                <div class="d-flex flex-row justify-start">
                    <MudTable Items="@PersonVersion.Person.Status" Hover="true" Striped="true" Dense="true" Elevation="0" Class="mr">
                        <HeaderContent>
                            <MudTh><MudTableSortLabel SortBy=@SortStatusDatum InitialDirection="SortDirection.Ascending">Datum</MudTableSortLabel></MudTh>
                            <MudTh>Ereignis</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Datum">
                                @if (context.EingetretenAm.HasValue)
                                {
                                    @context.EingetretenAm.Value.ToString(deDe.DateTimeFormat.ShortDatePattern, deDe)
                                }
                            </MudTd>
                            <MudTd DataLabel="Ereignis">
                                @context.Typ.GetDisplayName()
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                    <MudSpacer />
                </div>
            </MudListItem>
        </MudList>
    </MudCardContent>
</MudCard>

@if (PersonVersion.Person.Beziehungen.Count > 0)
{
    <MudCard Outlined="true" Class="ma-8">
        <MudCardContent>
            <MudList>
                <MudListSubheader>
                    <MudText Typo="Typo.h6">Beziehungen</MudText>
                </MudListSubheader>
                @foreach (var beziehung in PersonVersion.Person.Beziehungen)
                {
                    <MudListItem>
                        @if ((beziehung.Typ == BeziehungsTyp.Elternteil) && (PersonVersion.Person.Geschlecht == Geschlecht.Maennlich))
                        {
                            @:Vater von
                        }
                        else if ((beziehung.Typ == BeziehungsTyp.Elternteil) && (PersonVersion.Person.Geschlecht == Geschlecht.Weiblich))
                        {
                            @:Mutter von
                        }
                        else
                        {
                            @:@beziehung.Typ von
                        }
                        @if (beziehung.AvId.HasValue && Beziehungen.ContainsKey(beziehung.AvId.Value))
                        {
                            var detailHref = $"/Details/{beziehung.AvId.Value}";
                            <MudLink Href="@detailHref">
                                @Beziehungen[beziehung.AvId.Value].Person.Vorname @Beziehungen[beziehung.AvId.Value].Person.Nachname
                            </MudLink>
                        }
                        else
                        {
                            @:@beziehung.Vorname @beziehung.Nachname
                        }
                        <MudText Typo="Typo.caption">
                            <GueltigVonBis GueltigVon="@beziehung.GueltigVon" GueltigBis="@beziehung.GueltigBis" />
                        </MudText>
                    </MudListItem>
                }
            </MudList>
        </MudCardContent>
    </MudCard>
}

@if (PersonVersion.Person.Ausbildungen.Count > 0)
{
    <MudCard Outlined="true" Class="ma-8">
        <MudCardContent>
            <MudList>
                <MudListSubheader>
                    <MudText Typo="Typo.h6">Ausbildung</MudText>
                </MudListSubheader>
                @foreach (var ausbildung in PersonVersion.Person.Ausbildungen)
                {
                    <MudListItem>
                        @ausbildung.Abschluss @ausbildung.Name
                        <GueltigVonBis GueltigVon="@ausbildung.GueltigVon" GueltigBis="@ausbildung.GueltigBis" Caption="" AddSeperator="false" />
                        @if (ausbildung.GueltigBis.HasValue && !ausbildung.AbschlussErreicht)
                        {
                            @: (abgebrochen)
                        }
                    </MudListItem>
                }
            </MudList>
        </MudCardContent>
    </MudCard>
}

@if (PersonVersion.Person.Arbeitgeber.Count > 0)
{
    <MudCard Outlined="true" Class="ma-8">
        <MudCardContent>
            <MudList>
                <MudListSubheader>
                    <MudText Typo="Typo.h6">Arbeitgeber</MudText>
                </MudListSubheader>
                @foreach (var arbeitgeber in PersonVersion.Person.Arbeitgeber)
                {
                    <MudListItem>
                        <MudText Typo="Typo.caption">
                            <GueltigVonBis GueltigVon="@arbeitgeber.GueltigVon" GueltigBis="@arbeitgeber.GueltigBis" AddLinebreak="true" AddSeperator="false" />
                        </MudText>
                        @if (!string.IsNullOrEmpty(@arbeitgeber.Position))
                        {
                            @: @arbeitgeber.Position bei @arbeitgeber.Name
                        }
                        else
                        {
                            @: @arbeitgeber.Name
                        }
                        @if (!string.IsNullOrEmpty(@arbeitgeber.Abteilung))
                        {
                            @: (@arbeitgeber.Abteilung)
                        }
                        @if (!string.IsNullOrEmpty(@arbeitgeber.Adresse.Strasse) || !string.IsNullOrEmpty(@arbeitgeber.Adresse.Ort))
                        {
                            <br />
                            @: @arbeitgeber.Adresse.Strasse in
                            @: @arbeitgeber.Adresse.PLZ @arbeitgeber.Adresse.Ort,
                            @: @arbeitgeber.Adresse.Land
                        }
                        @if (!string.IsNullOrEmpty(arbeitgeber.Adresse.Telefon))
                        {
                            <br />

                            @:Tel:
                            <a href="tel:@arbeitgeber.Adresse.Telefon">@arbeitgeber.Adresse.Telefon</a>
                        }
                    </MudListItem>
                }
            </MudList>
        </MudCardContent>
    </MudCard>
}

<MudExpansionPanels Class="ma-8">
    <MudExpansionPanel @ref="_historyPanel" Text="Frühere Versionen" IsExpandedChanged="History_ExpandedChanged">
        @if (_oldVersions != null)
        {
            <MudSimpleTable Style="overflow-x: auto;">
                <thead>
                    <tr>
                        <th>Änderungsdatum</th>
                        <th>Änderungsgrund</th>
                        <th>Von</th>
                        <th>Aktionen</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var oldVer in _oldVersions.OrderBy((pv) => pv.CommittedAt))
                    {
                        var detailsHistory = $"/Details/{oldVer.AvId}/{oldVer.PersonVersionId}";
                        <tr>
                            <td>@oldVer.CommittedAt</td>
                            <td>@oldVer.CommitMessage</td>
                            @if (oldVer.ComitterAvId.HasValue)
                            {
                                <td>@Beziehungen[oldVer.ComitterAvId.Value].Person.Vorname @Beziehungen[oldVer.ComitterAvId.Value].Person.Nachname</td>
                            }
                            else
                            {
                                <td>System</td>
                            }
                            <td>
                                <MudIconButton Href="@detailsHistory" Icon="@Icons.Material.Filled.ReadMore" Edge="Edge.End" Size="Size.Small" Class="mx-3" />
                            </td>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

<MudExpansionPanels Class="ma-8">
    <MudExpansionPanel Text="Rohdaten">
        <pre>
            @(JsonSerializer.Serialize(PersonVersion, JsonPrettyOpts))
        </pre>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    [Parameter]
    public PersonVersion PersonVersion { get; set; } = null!;

    [Parameter]
    public Dictionary<int, PersonVersion> Beziehungen { get; set; } = null!;

    private MudExpansionPanel? _historyPanel { get; set; }

    private IReadOnlyCollection<PersonVersion>? _oldVersions;

    private JsonSerializerOptions JsonPrettyOpts => new(_jsonOpts)
        {
            WriteIndented = true,
            Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping,
        };

    private Func<StatusEreignis, object?> SortStatusDatum = s => s.EingetretenAm?.ToInstant();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _oldVersions = null;
        _historyPanel?.Collapse();
    }

    private async Task History_ExpandedChanged(bool newVal)
    {
        if (!newVal || _oldVersions != null)
        {
            return;
        }

        _oldVersions = await pva.GetAllByAvIdAsync(PersonVersion.AvId);
        foreach (var oldPv in _oldVersions)
        {
            if (oldPv.ComitterAvId.HasValue && !Beziehungen.ContainsKey(oldPv.ComitterAvId.Value))
            {
                Beziehungen[oldPv.ComitterAvId.Value] = await pva.GetCurrentByAvIdAsync(oldPv.ComitterAvId.Value);
            }
        }
    }
}
