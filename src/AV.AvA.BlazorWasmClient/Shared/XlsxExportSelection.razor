@using CsvHelper;
@using Microsoft.AspNetCore.Components.WebAssembly.Services;
@using System.Reflection;

@using AV.AvA.BlazorWasmClient.Models
@using AV.AvA.BlazorWasmClient.Services
@using AV.AvA.Model
@using AutoMapper
@using ClosedXML.Excel
@using NodaTime
@inject IPersonVersionAccessor pva
@inject IMapper mapper
@inject IClock clock
@inject LazyAssemblyLoader AssemblyLoader
@inject ILogger<App> Logger

<div class="ma-8">
    <div class="mb-4">
        Dateiformat für Export:
        <MudChipSet @bind-SelectedChip="selectedFormatChip" Filter="true" Mandatory="true">
            <MudChip Text="xlsx" Default="true">XLSX</MudChip>
            <MudChip Text="csv">CSV</MudChip>
        </MudChipSet>
    </div>

    <FileDownload @ref="currentRecordDownload" FileNameFactory="@(() => $"AvaExportList_{DateTime.Now:yyy-MM-dd_HH-mm-ss}.{fileExt}")" StreamFactory="GetCurrentRecordsExcelStream" />
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Custom.FileFormats.FileExcel" OnClick="TriggerCurrentRecordDownload" Class="mb-4">
        Aktuellen Stand exportieren
    </MudButton>
    <br />

    <FileDownload @ref="emailListDownload" FileNameFactory="@(() => $"AvaEmailList_{DateTime.Now:yyy-MM-dd_HH-mm-ss}.{fileExt}")" StreamFactory="GetEmailListExcelStream" />
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Custom.FileFormats.FileExcel" OnClick="TriggerEmailListDownload" Class="mb-4">
        E-Mail-Liste exportieren
    </MudButton>
    <br />

    <FileDownload @ref="birthdayListDownload" FileNameFactory="@(() => $"AvaBirthdayList_{DateTime.Now:yyy-MM-dd_HH-mm-ss}.{fileExt}")" StreamFactory="GetBirthdayListExcelStream" />
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Custom.FileFormats.FileExcel" OnClick="TriggerBirthdayListDownload" Class="mb-4">
        Geburtstagsliste exportieren
    </MudButton>
</div>

@code {
    private readonly string[] lazyLoadAssemblies = new[]
    {
        "ClosedXML.dll",
        "DocumentFormat.OpenXml.dll",
        "ExcelNumberFormat.dll",
        "System.IO.Packaging.dll",
        "XLParser.dll",
        "SixLabors.Fonts.dll",
        "CsvHelper.dll"
    };

    private Task? lazyLoadAssembliesTask;

    private MudChip? selectedFormatChip;

    private string? fileExt => selectedFormatChip?.Text switch
    {
        "xlsx" => "xlsx",
        "csv" => "csv",
        null => null,
        _ => throw new NotImplementedException(),
    };

    private FileDownload? currentRecordDownload;
    private FileDownload? emailListDownload;
    private FileDownload? birthdayListDownload;

    private Task TriggerCurrentRecordDownload() => TriggerDownload(currentRecordDownload!);

    private Task TriggerEmailListDownload() => TriggerDownload(emailListDownload!);

    private Task TriggerBirthdayListDownload() => TriggerDownload(birthdayListDownload!);

    private async Task TriggerDownload(FileDownload dwl)
    {
        _ = lazyLoadAssembliesTask ?? throw new InvalidOperationException("Lazy loading task not initialized");
        await lazyLoadAssembliesTask;
        await dwl.TriggerDownloadAsync();
    }

    private Stream GetExcelStream<T>(IEnumerable<T> data, string worksheetName)
    {
        // this is a factory, don't dispose
        var ms = new MemoryStream();

        void SaveXlsx()
        {
            using var workbook = new XLWorkbook();

            var worksheet = workbook.Worksheets.Add(worksheetName);
            worksheet.Cell(1, 1).InsertTable(data);

            workbook.SaveAs(ms);
        }

        void SaveCsv()
        {
            using var writer = new StreamWriter(ms, System.Text.Encoding.UTF8, leaveOpen: true);
            using var csv = new CsvWriter(writer, System.Globalization.CultureInfo.InvariantCulture);
            csv.WriteRecords(data);
        }

        if (selectedFormatChip?.Text == "xlsx") SaveXlsx();
        else if (selectedFormatChip?.Text == "csv") SaveCsv();
        else throw new NotImplementedException();

        ms.Seek(0, SeekOrigin.Begin);
        return ms;
    }

    private async Task<Stream> GetXlsxStream<T>(
        string worksheetName = "AvA Export",
        Func<IReadOnlyCollection<PersonVersion>, IEnumerable<PersonVersion>>? transform = null)
    {
        var recs = await pva.GetCurrentAsync();
        IEnumerable<PersonVersion> pvs = transform == null ? recs : transform(recs);
        var xlsxModels = pvs.Select(r => mapper.Map<T>(r));
        return GetExcelStream(xlsxModels, worksheetName);
    }

    private Task<Stream> GetCurrentRecordsExcelStream()
        => GetXlsxStream<DefaultXlsxExportModel>($"AvA Export {DateTime.Now:yyyy-MM-dd}");

    private async Task<Stream> GetEmailListExcelStream()
    {
        var now = clock.GetCurrentInstant();
        var recs = await pva.GetCurrentAsync();
        var recPerMail = recs.SelectMany(r => r.Person.Emails.Select(e => (r, e)));
        var valid = recPerMail.Where(x =>
            (x.e.GueltigVon?.ToInstant() ?? Instant.MinValue) <= now &&
            (x.e.GueltigBis?.ToInstant() ?? Instant.MaxValue) >= now);
        var xlsxModels = valid.Select(r => mapper.Map<XlsxEmailExportModel>(r));
        return GetExcelStream(xlsxModels, $"AvA E-Mail Export {DateTime.Now:yyyy-MM-dd}");
    }

    private Task<Stream> GetBirthdayListExcelStream() => GetXlsxStream<XlsxBirthdayListExportModel>(
        $"AvA Geburtstage {DateTime.Now:yyyy-MM-dd}",
        pvs => pvs.OrderBy(pv => pv.Person.Geburtsdatum));

    protected override void OnInitialized()
    {
        lazyLoadAssembliesTask = LazyLoadDependencyAssemblies();
        base.OnInitialized();
    }

    private async Task LazyLoadDependencyAssemblies()
    {
        try
        {
            var assemblies = await AssemblyLoader.LoadAssembliesAsync(lazyLoadAssemblies);
        }
        catch (Exception ex)
        {
            Logger.LogError("Error: {Message}", ex.Message);
            throw;
        }
    }
}
