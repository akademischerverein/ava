@using AV.AvA.Model

<MudTable Virtualize="@true" Height="calc(100vh - var(--mud-appbar-height) - 32px - 64px)" Items="@PersonVersions" Hover="true" Striped="true" Filter="FilterFunc" SortLabel="Sortieren" Class="ma-4 table-layout-fixed" FixedHeader="true">
    <ToolBarContent>
        <MudText Typo="Typo.h5">Personen</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Suche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 align-self-start"></MudTextField>
        <MudIconButton Icon="@Icons.Material.Filled.FilterAlt" Color="Color.Inherit" @onclick=@ToggleSettings />
        <MudPopover Open="@settingsOpen" Fixed="true" Class="px-4 pt-4"  AnchorOrigin="@Origin.TopRight" TransformOrigin="@Origin.TopRight">
            <div class="d-flex flex-column">
                <MudText Typo="Typo.subtitle2">Filter</MudText>
                <MudSwitch @bind-Checked="showVerstorben">Verstorbene anzeigen</MudSwitch>
                <MudSwitch @bind-Checked="showAusgetreten" Disabled="true">Ausgetretene anzeigen</MudSwitch>
                <MudButton OnClick="@ToggleSettings" Class="ml-auto mt-4 mb-4" Variant="Variant.Outlined" Color="Color.Secondary">Schlie√üen</MudButton>
            </div>
        </MudPopover>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy=@CreateSortKeyVorname>Vorname</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy=@CreateSortKeyNachname InitialDirection="SortDirection.Ascending">Nachname</MudTableSortLabel></MudTh>
        <MudTh Style="width: 10em;">Aktionen</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Vorname">
            @((context.Person.Status.Any((s) => s.Typ == StatusEreignisTyp.Verstorben)) ? "\u2020" : "") @context.Person.Vorname @context.Person.Zweitnamen
        </MudTd>
        <MudTd DataLabel="Nachname">
            @context.Person.NachnamePraefix @context.Person.Nachname
        </MudTd>
        <MudTd DataLabel="Aktionen">
			<MudIconButton Href=@DetailUrl(context) Icon="@Icons.Filled.ReadMore" Edge="Edge.Start" Size="Size.Small" Class="mx-3" />
			<!--<MudIconButton Href=@EditUrl(context) Icon="@Icons.Material.Filled.Edit" Edge="Edge.End" Size="Size.Small" Class="mx-3" />-->
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private string searchString = "";
    private bool settingsOpen = false;
    private bool showVerstorben = false;
    private bool showAusgetreten = true;

    public void ToggleSettings()
    {
        settingsOpen = !settingsOpen;
    }

    [Parameter]
    public IReadOnlyCollection<PersonVersion>? PersonVersions { get; set; }

    private Func<PersonVersion, object> CreateSortKeyVorname = pv => (
        pv.Person.Vorname ?? "",
        pv.Person.Zweitnamen ?? "",
        pv.Person.Nachname ?? "",
        pv.Person.NachnamePraefix ?? ""
    );

    private Func<PersonVersion, object> CreateSortKeyNachname = pv => (
        pv.Person.Nachname ?? "",
        pv.Person.NachnamePraefix ?? "",
        pv.Person.Vorname ?? "",
        pv.Person.Zweitnamen ?? ""
    );

    private bool FilterFunc(PersonVersion pv)
    {
        if (!showVerstorben && pv.Person.Status.Any((s) => s.Typ == StatusEreignisTyp.Verstorben))
            return false;
        if (!showAusgetreten && pv.Person.Status.Any((s) => s.Typ == StatusEreignisTyp.AusscheidenAktivitas))
            return false;
        if (!showAusgetreten && pv.Person.Status.Any((s) => s.Typ == StatusEreignisTyp.AusscheidenAVeV))
            return false;
        if (!showAusgetreten && pv.Person.Status.Any((s) => s.Typ == StatusEreignisTyp.AusscheidenHG))
            return false;
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        return searchString
            .Split(" ")
            .All((s) =>
                pv.Person.Vorname.Contains(s, StringComparison.InvariantCultureIgnoreCase) ||
                (pv.Person.Zweitnamen ?? "").Contains(s, StringComparison.InvariantCultureIgnoreCase) ||
                pv.Person.Nachname.Contains(s, StringComparison.InvariantCultureIgnoreCase) ||
                (pv.Person.NachnamePraefix ?? "").Contains(s, StringComparison.InvariantCultureIgnoreCase)
            );
    }

    private string DetailUrl(PersonVersion pv)
    {
        return $"/Details/{pv.AvId}";
    }

    private string EditUrl(PersonVersion pv)
    {
        return $"/Edit/{pv.AvId}";
    }
}
